package com.appsdeveloperblog.photoapp.api.user.service;

import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.modelmapper.spi.MatchingStrategy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.appsdeveloperblog.photoapp.api.user.data.UserEntity;
import com.appsdeveloperblog.photoapp.api.user.data.UserRepository;
import com.appsdeveloperblog.photoapp.api.user.shared.UserDto;

@Service
public class UserServiceImpl implements UserService {
	
	UserRepository userRepository;
	
	
	BCryptPasswordEncoder bCryptPasswordEncoder;
	
@Autowired
public 	UserServiceImpl(UserRepository userRepository,BCryptPasswordEncoder bCryptPasswordEncoder){
		this.userRepository =userRepository;
		this.bCryptPasswordEncoder=bCryptPasswordEncoder;
	}
	
	@Override
	public UserDto createUser(UserDto userDetails) {
		userDetails.setUserId(UUID.randomUUID().toString());
		userDetails.setEncryptedPassword(bCryptPasswordEncoder.encode(userDetails.getPassword()));	
		
		ModelMapper modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		 
		UserEntity userEntity = modelMapper.map(userDetails, UserEntity.class);
	
	    
		userRepository.save(userEntity);
		 
		 UserDto returnValue = modelMapper.map(userEntity, UserDto.class);
		 return returnValue;
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		userRepository
		return null;
	}

}
