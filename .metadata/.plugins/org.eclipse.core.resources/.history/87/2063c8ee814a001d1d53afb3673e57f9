package com.appsdeveloperblog.photoapp.api.user.security;

import java.io.IOException;
import io.jsonwebtoken.*;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.AuthenticationException;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.aop.ThrowsAdvice;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.appsdeveloperblog.photoapp.api.user.service.UserService;
import com.appsdeveloperblog.photoapp.api.user.shared.UserDto;
import com.appsdeveloperblog.photoapp.api.users.ui.model.LogginRequestModel;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sun.org.apache.xml.internal.security.algorithms.SignatureAlgorithm;

import io.jsonwebtoken.Jwts;

public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {

private UserService userService;

private Environment environment;

@Autowired
public AuthenticationFilter(UserService userService,
		Environment environment,AuthenticationManager authenticationManager) {
	this.userService=userService;
	this.environment=environment;
	super.setAuthenticationManager(authenticationManager);
}

@Override
public Authentication attemptAuthentication(HttpServletRequest req,
HttpServletResponse res) {
	
	try {
		LogginRequestModel creds = new ObjectMapper()
				.readValue(req.getInputStream(), LogginRequestModel.class);
		return getAuthenticationManager().authenticate(
				new UsernamePasswordAuthenticationToken(creds.getEmail(),
						creds.getPassword(),
						new ArrayList<>()
						)
				);
		
	} catch (IOException e) {
		throw new RuntimeException();
		
	}
}
@Override
protected void successfulAuthentication(HttpServletRequest req,
		                              HttpServletResponse res
		                              ,FilterChain chin,
		                              Authentication auth) throws IOException,ServletException{
	
	String userName = ((User)auth.getPrincipal()).getUsername();
	UserDto userDetails = userService.getUserDetailsByEmail(userName);
	
	String token = Jwts.builder()
			.setSubject(userDetails.getUserId())
			.setExpiration(new Date(System.currentTimeMillis()+
					Long.parseLong(environment.getProperty("token.expiration"))))
			.signWith(SignatureAlgorithm.HS512, environment.getProperty("token.secret"))
			.compact();
	
}



}
